{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport { combineReducers } from \"redux\"; // import CasesReducer from '../reducers/cases';\n\nimport UserReducer from '../reducers/user';\nimport DocketReducer from '../reducers/docket';\nimport AuthReducer from '../reducers/auth';\nimport AppError from '../reducers/appErrors';\nimport NewCaseParams from '../reducers/newCaseParams';\nconst appReducer = combineReducers({\n  docket: DocketReducer,\n  auth: AuthReducer,\n  appError: AppError,\n  newCasePayload: NewCaseParams\n});\n\nconst rootReducer = (state, action) => {\n  const updatedState = Object.assign({}, state);\n\n  if (action.type === 'AUTH_LOGOUT_SUCCESS') {\n    Object.keys(updatedState).forEach(sk => {\n      updatedState[sk] = undefined;\n    });\n  }\n\n  return appReducer(updatedState, action);\n};\n\nexport const setupStore = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(logger),\n  devTools: process.env.NODE_ENV !== 'production'\n});","map":{"version":3,"names":["configureStore","logger","combineReducers","UserReducer","DocketReducer","AuthReducer","AppError","NewCaseParams","appReducer","docket","auth","appError","newCasePayload","rootReducer","state","action","updatedState","Object","assign","type","keys","forEach","sk","undefined","setupStore","reducer","middleware","getDefaultMiddleware","concat","devTools","process","env","NODE_ENV"],"sources":["/Users/faheeemsajjad/personal/Dynamic-Navigation-Flow/react native/navigation flow/web/src/store/index.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\nimport logger from 'redux-logger'\nimport { combineReducers} from \"redux\";\n// import CasesReducer from '../reducers/cases';\n\nimport UserReducer from '../reducers/user';\nimport DocketReducer from '../reducers/docket';\nimport AuthReducer from '../reducers/auth';\nimport AppError from '../reducers/appErrors';\nimport NewCaseParams from '../reducers/newCaseParams'\n\nconst appReducer = combineReducers({\n    docket: DocketReducer,\n    auth: AuthReducer,\n    appError: AppError,\n    newCasePayload:NewCaseParams\n})\n\nconst rootReducer = (state, action) => {\n\n    const updatedState = Object.assign({}, state);\n    \n    if (action.type === 'AUTH_LOGOUT_SUCCESS') {\n        Object.keys(updatedState).forEach(sk => {\n            updatedState[sk] = undefined;\n        })\n    }\n\n    return appReducer(updatedState, action)\n}\n\nexport const setupStore = configureStore({\n    reducer:rootReducer,\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n    devTools: process.env.NODE_ENV !== 'production'\n})"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,eAAT,QAA+B,OAA/B,C,CACA;;AAEA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AAEA,MAAMC,UAAU,GAAGN,eAAe,CAAC;EAC/BO,MAAM,EAAEL,aADuB;EAE/BM,IAAI,EAAEL,WAFyB;EAG/BM,QAAQ,EAAEL,QAHqB;EAI/BM,cAAc,EAACL;AAJgB,CAAD,CAAlC;;AAOA,MAAMM,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EAEnC,MAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,CAArB;;EAEA,IAAIC,MAAM,CAACI,IAAP,KAAgB,qBAApB,EAA2C;IACvCF,MAAM,CAACG,IAAP,CAAYJ,YAAZ,EAA0BK,OAA1B,CAAkCC,EAAE,IAAI;MACpCN,YAAY,CAACM,EAAD,CAAZ,GAAmBC,SAAnB;IACH,CAFD;EAGH;;EAED,OAAOf,UAAU,CAACQ,YAAD,EAAeD,MAAf,CAAjB;AACH,CAXD;;AAaA,OAAO,MAAMS,UAAU,GAAGxB,cAAc,CAAC;EACrCyB,OAAO,EAACZ,WAD6B;EAErCa,UAAU,EAAGC,oBAAD,IAA0BA,oBAAoB,GAAGC,MAAvB,CAA8B3B,MAA9B,CAFD;EAGrC4B,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB;AAHE,CAAD,CAAjC"},"metadata":{},"sourceType":"module"}